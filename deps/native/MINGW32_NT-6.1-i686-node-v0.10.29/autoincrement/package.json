{
  "name": "autoincrement",
  "version": "1.0.0",
  "description": "Clever auto-incrementing variable that works by magic.",
  "main": "main.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/CamiloMM/autoincrement.git"
  },
  "keywords": [
    "auto",
    "increment",
    "number",
    "variable",
    "clever",
    "magic",
    "trick"
  ],
  "author": {
    "name": "Camilo Martin",
    "email": "http://camilo.is",
    "url": "http://camilo.is/"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/CamiloMM/autoincrement/issues"
  },
  "homepage": "https://github.com/CamiloMM/autoincrement",
  "readme": "# autoincrement\nClever auto-incrementing variable that works by magic.\n\n```bash\nnpm install autoincrement\n```\n\n### What is it?\n\nA magical variable that will always be equal to its last value, plus one.\n\n```js\nvar autoincrement = require('autoincrement');\nautoincrement == (autoincrement + 1);\n```\n\nNote how we used the `==` loose comparison operator. Because, this is not a number, even if it behaves like one.\n\nIf it was a real number, we couldn't do this:\n\n```js\nvar foo = autoincrement;\nfoo == (foo + 1);\nfoo == (autoincrement + 1);\nautoincrement == (foo + 1);\n```\n\nAs you can see, they behave like true aliases. If you want a true number that's passed by value, you can:\n\n```js\nvar byRef = autoincrement;\nvar byVal = +autoincrement;\ntypof byRef === 'object';\ntypof byVal === 'number';\n```\n\nBut in some cases you don't even need to:\n\n```js\nvar className = 'incrementing-thing-' + autoincrement;\nvar isRecent = autoIncrementedNumber > autoincrement - 100;\n```\n\nJust remember to use number coercion (`+autoincrement`) when you need the number and not an auto-incrementing object.\n\n### What number is it? Does it start from one?\n\nIt doesn't start from one! And that is another feature.\n\nConsider that you'll at some point reboot the server. You still want new auto-incrementing numbers later, but you don't want having to persist the last one in a database, that's too much hassle. Still, you want the next run of your app to have auto-incrementing numbers that don't start over again.\n\nThe solution to this, is dates! Every time you start your app and `require('autoincrement')`, the number used will be the current UTC unix time in milliseconds.\n\nIn other words, as long as the auto-incrementing variable hasn't been used more than *a thousand times per second* since the last time your app has been started, you'll be guaranteed to have always bigger numbers. This is a very permissive restriction, and note that during the app's runtime, you can use them as frequently as you want (even in peaks of more than 1k/s, if you manage to have them).\n\n### Why not just use `+new Date` then?\n\nBecause the number would be the same if you use it twice in the same millisecond, which is a likely scenario. Using it more than 1000 times per second on average for the whole lifespan of the app is, however, a lot less likely.\n\n### Isn't that kind of number too big?\n\nNot at all, a number like this fits pretty comfortably in javascript's (and most languages') number representation, and since they're sequential, intense usage in web resources will be gzipped out with great ease.\n\nStill, note that if you plan to insert them into some other language, 64-bit ints would be necessary. If that's not possible, read on:\n\n### What if I want it to start from one?\n\nThat's fine too! Just do this:\n\n```js\nvar startFromOne = require('autoincrement').from(1);\nstartFromOne == 1;\nstartFromOne == 2;\n```\n\nYou can start from arbitrary numbers, but also dates: just pass a string parameter with an ISO-like date, or numbers representing the date. For example:\n\n```js\nvar autoincrement = require('autoincrement');\nvar startFromBirthday1 = autoincrement.from('July 17, 1990 04:30:00');\nvar startFromBirthday2 = autoincrement.from('1990-07-17T04:30:00');\nvar startFromBirthday3 = autoincrement.from(1990, 6, 17);\nvar startFromBirthday4 = autoincrement.from(1990, 6, 17, 4, 30, 0);\n```\n\nThese are all arguments valid for the [javascript `Date` constructor](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date).\n\nIn these cases, the actual number used will be the count of milliseconds since that date. To protect the user from mistakes, an error will be thrown if the resulting number would have been negative.\n\n### How can I persist the value?\n\nIn case you want to use just the auto-incrementing feature and want to go the more traditional route of persisting the value into a database, which is boring as fuck, but gives you the advantage of sequential numbers, you can use the following method:\n\n```js\nautoincrement.notify(function(currentNumber) {\n    doSomethingWith(currentNumber);\n});\n```\n\nThen at the next time the app is ran:\n\n```js\nvar autoincrement = require('autoincrement').from(previousCurrentNumber + 1);\n```\n\nHowever, I think you'll find the default usage far nicer, and sufficient for most use cases.\n\n### How does it work?\n\nI thought you'd never ask! Read up on [`valueOf`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/valueOf). That's what's being used here.\n\nIn other words, this will work on *any* browser and on *any* javascript engine.\n",
  "readmeFilename": "README.md",
  "gitHead": "0d5e769e30e897daaa33d7319e32503f1c56a8d2",
  "_id": "autoincrement@1.0.0",
  "_shasum": "4f35b68f21fb090ae23c845c6798e3928ba13ac3",
  "_from": "autoincrement@"
}
