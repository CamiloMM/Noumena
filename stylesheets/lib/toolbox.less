// Short-hand positioning.

.absolute () { position: absolute; }
.relative () { position: relative; }
.static   () { position: static;   }
.fixed    () { position: fixed;    }

// Short-hand display roles.

.no-display         () { display: none;               }
.block              () { display: block;              }
.inline             () { display: inline;             }
.inline-block       () { display: inline-block;       }
.inline-table       () { display: inline-table;       }
.run-in             () { display: run-in;             } // I can't understand this one.
.table              () { display: table;              }
.table-row          () { display: table-row;          }
.table-cell         () { display: table-cell;         }
.table-column       () { display: table-column;       }
.table-column-group () { display: table-column-group; }
.table-footer-group () { display: table-footer-group; }
.table-header-group () { display: table-header-group; }
.table-row-group    () { display: table-row-group;    }

// Short-hand visibility.

.visible  () { visibility: visible;  }
.hidden   () { visibility: hidden;   }
.collapse () { visibility: collapse; }

// Short-hand overflow and whitespace.

.show-overflow   () { overflow: visible; }
.hide-overflow   () { overflow: hidden;  }
.auto-overflow   () { overflow: auto;    }
.scroll-overflow () { overflow: scroll;  }

.show-x-overflow   () { overflow-x: visible; }
.hide-x-overflow   () { overflow-x: hidden;  }
.auto-x-overflow   () { overflow-x: auto;    }
.scroll-x-overflow () { overflow-x: scroll;  }
.show-y-overflow   () { overflow-y: visible; }
.hide-y-overflow   () { overflow-y: hidden;  }
.auto-y-overflow   () { overflow-y: auto;    }
.scroll-y-overflow () { overflow-y: scroll;  }

.hide-x () { overflow-x: hidden; }
.hide-y () { overflow-y: hidden; }
.hide-h () { overflow-x: hidden; }
.hide-v () { overflow-y: hidden; }

.scroll   () { overflow:   scroll; }
.scroll-x () { overflow-x: scroll; }
.scroll-y () { overflow-y: scroll; }
.scroll-h () { overflow-x: scroll; }
.scroll-v () { overflow-y: scroll; }

.text-clip () { text-overflow: clip; }
.ellipsis  () { text-overflow: ellipsis; }

.wrap     () { white-space: normal;   }
.no-wrap  () { white-space: nowrap;   }
.pre      () { white-space: pre;      }
.pre-line () { white-space: pre-line; }
.pre-wrap () { white-space: pre-wrap; }

// Font short-hands.

.italic     () { font-style:  italic; }
.not-italic () { font-style:  normal; }
.bold       () { font-weight: bold;   }
.not-bold   () { font-weight: normal; }
.light      () { font-weight: 300;    }

.no-decoration () { text-decoration: none;         }
.no-underline  () { text-decoration: none;         }
.underline     () { text-decoration: underline;    }
.overline      () { text-decoration: overline;     }
.line-through  () { text-decoration: line-through; }

// Short-hand docking. (Some guarded against the positioned versions below.)

.top0    () { top:    0; }
.right0  () { right:  0; }
.bottom0 () { bottom: 0; }
.left0   () { left:   0; }

.top-left     (@top, @left )    when not (iskeyword(@top))    { top:    @top;    left:  @left;  }
.top-right    (@top, @right)    when not (iskeyword(@top))    { top:    @top;    right: @right; }
.bottom-left  (@bottom, @left ) when not (iskeyword(@bottom)) { bottom: @bottom; left:  @left;  }
.bottom-right (@bottom, @right) when not (iskeyword(@bottom)) { bottom: @bottom; right: @right; }

.top-left     (@both: 0) when not (iskeyword(@both)) { .top-left    (@both, @both); }
.top-right    (@both: 0) when not (iskeyword(@both)) { .top-right   (@both, @both); }
.bottom-left  (@both: 0) when not (iskeyword(@both)) { .bottom-left (@both, @both); }
.bottom-right (@both: 0) when not (iskeyword(@both)) { .bottom-right(@both, @both); }

.dock-top    () { .top0;   .right0;  .left0;   }
.dock-right  () { .top0;   .right0;  .bottom0; }
.dock-bottom () { .right0; .bottom0; .left0;   }
.dock-left   () { .top0;   .bottom0; .left0;   }

.dock-top    (@height) when not (iskeyword(@height)) { .top0;   .right0;  .left0;   height: @height; }
.dock-right  (@width ) when not ( iskeyword(@width)) { .top0;   .right0;  .bottom0; width:  @width;  }
.dock-bottom (@height) when not (iskeyword(@height)) { .right0; .bottom0; .left0;   height: @height; }
.dock-left   (@width ) when not ( iskeyword(@width)) { .top0;   .bottom0; .left0;   width:  @width;  }

.sides (@top, @right, @bottom, @left) when not (iskeyword(@top)) { top: @top; right: @right; bottom: @bottom; left: @left; }
.sides (@vert, @horiz) when not (iskeyword(@vert)) { top: @vert; right: @horiz; bottom: @vert; left: @horiz; }
.sides (@all) when not (iskeyword(@all)) { top: @all; right: @all; bottom: @all; left: @all; }

.fill () { .sides(0); }

// Same as above, but with absolute and fixed switches.

.top0         (absolute) { .absolute; .top0; }
.right0       (absolute) { .absolute; .right0; }
.bottom0      (absolute) { .absolute; .bottom0; }
.left0        (absolute) { .absolute; .left0; }
.top-left     (absolute, @top, @left ) { .absolute; .top-left(@top, @left); }
.top-right    (absolute, @top, @right) { .absolute; .top-right(@top, @right); }
.bottom-left  (absolute, @bottom, @left ) { .absolute; .bottom-left(@bottom, @left); }
.bottom-right (absolute, @bottom, @right) { .absolute; .bottom-right(@bottom, @right); }
.top-left     (absolute, @both: 0) { .absolute; .top-left(@both); }
.top-right    (absolute, @both: 0) { .absolute; .top-right(@both); }
.bottom-left  (absolute, @both: 0) { .absolute; .bottom-left(@both); }
.bottom-right (absolute, @both: 0) { .absolute; .bottom-right(@both); }
.dock-top     (absolute) { .absolute; .dock-top; }
.dock-right   (absolute) { .absolute; .dock-right; }
.dock-bottom  (absolute) { .absolute; .dock-bottom; }
.dock-left    (absolute) { .absolute; .dock-left; }
.dock-top     (absolute, @height) { .absolute; .dock-top(@height); }
.dock-right   (absolute, @width ) { .absolute; .dock-right(@width); }
.dock-bottom  (absolute, @height) { .absolute; .dock-bottom(@height); }
.dock-left    (absolute, @width ) { .absolute; .dock-left(@width); }
.sides        (absolute, @top, @right, @bottom, @left) { .absolute; .sides(@top, @right, @bottom, @left); }
.sides        (absolute, @vert, @horiz) { .absolute; .sides(@vert, @horiz); }
.sides        (absolute, @all) { .absolute; .sides(@all); }
.fill         (absolute) { .absolute; .fill; }

.top0         (fixed) { .fixed; .top0; }
.right0       (fixed) { .fixed; .right0; }
.bottom0      (fixed) { .fixed; .bottom0; }
.left0        (fixed) { .fixed; .left0; }
.top-left     (fixed, @top, @left ) { .fixed; .top-left(@top, @left); }
.top-right    (fixed, @top, @right) { .fixed; .top-right(@top, @right); }
.bottom-left  (fixed, @bottom, @left ) { .fixed; .bottom-left(@bottom, @left); }
.bottom-right (fixed, @bottom, @right) { .fixed; .bottom-right(@bottom, @right); }
.top-left     (fixed, @both: 0) { .fixed; .top-left(@both); }
.top-right    (fixed, @both: 0) { .fixed; .top-right(@both); }
.bottom-left  (fixed, @both: 0) { .fixed; .bottom-left(@both); }
.bottom-right (fixed, @both: 0) { .fixed; .bottom-right(@both); }
.dock-top     (fixed) { .fixed; .dock-top; }
.dock-right   (fixed) { .fixed; .dock-right; }
.dock-bottom  (fixed) { .fixed; .dock-bottom; }
.dock-left    (fixed) { .fixed; .dock-left; }
.dock-top     (fixed, @height) { .fixed; .dock-top(@height); }
.dock-right   (fixed, @width ) { .fixed; .dock-right(@width); }
.dock-bottom  (fixed, @height) { .fixed; .dock-bottom(@height); }
.dock-left    (fixed, @width ) { .fixed; .dock-left(@width); }
.sides        (fixed, @top, @right, @bottom, @left) { .fixed; .sides(@top, @right, @bottom, @left); }
.sides        (fixed, @vert, @horiz) { .fixed; .sides(@vert, @horiz); }
.sides        (fixed, @all) { .fixed; .sides(@all); }
.fill         (fixed) { .fixed; .fill; }

// Short-hand sizing.

.size (@width, @height) { width: @width; height: @height; }
.size (@size)           { .size(@size, @size);            }

.half-w () { width:   50%; }
.half-h () { height:  50%; }
.full-w () { width:  100%; }
.full-h () { height: 100%; }

.half () { .size( 50%); }
.full () { .size(100%); }

// Short-hand z-index.

.above (@level: 1) { z-index:  512 * @level; }
.below (@level: 1) { z-index: -512 * @level; }

// Background short-hands.

.bkg     (@bkg)        { background: @bkg;                 } // extended in 2015, see below
.no-bkg  ()            { .bkg(transparent);                }
.bkg-size(@size)       { background-size: @size;           }
.bkg-url (@url)        { background-image: url("@{url}");  }
.bkg-url (@url, @size) { .bkg-url(@url); .bkg-size(@size); }
.bkg-pos (@both)       { background-position: @both;       }
.bkg-pos (@x, @y)      { background-position: @x @y;       }

.repeat    () { background-repeat: repeat;    }
.repeat-x  () { background-repeat: repeat-x;  }
.repeat-y  () { background-repeat: repeat-y;  }
.no-repeat () { background-repeat: no-repeat; }

// Background-clip and background-origin. These are so verbose due to LESS string concat being stupid.

// Oh, and older versions of Gecko and Webkit use the outdated spec - without "-box". This requires
// more property names. But still if LESS would just let me concatenate two strings without
// a space in the middle or quotes around them... argh.

// Update in 2015: this is all so much bullshit. Time to castrate those prefixes.

//.bkg-clip (border-box)  { -webkit-background-clip: border;  -webkit-background-clip:  border-box;
//                             -moz-background-clip: border;     -moz-background-clip:  border-box;
//                                                                    background-clip:  border-box;}
//.bkg-clip (padding-box) { -webkit-background-clip: padding; -webkit-background-clip: padding-box;
//                             -moz-background-clip: padding;    -moz-background-clip: padding-box;
//                                                                    background-clip: padding-box;}
//.bkg-clip (content-box) { -webkit-background-clip: content; -webkit-background-clip: content-box;
//                             -moz-background-clip: content;    -moz-background-clip: content-box;
//                                                                    background-clip: content-box;}
//																	
//.bkg-origin (border-box)  { -webkit-background-origin: border;  -webkit-background-origin:  border-box;
//                               -moz-background-origin: border;     -moz-background-origin:  border-box;
//                                                                        background-origin:  border-box;}
//.bkg-origin (padding-box) { -webkit-background-origin: padding; -webkit-background-origin: padding-box;
//                               -moz-background-origin: padding;    -moz-background-origin: padding-box;
//                                                                        background-origin: padding-box;}
//.bkg-origin (content-box) { -webkit-background-origin: content; -webkit-background-origin: content-box;
//                               -moz-background-origin: content;    -moz-background-origin: content-box;
//                                                                        background-origin: content-box;}

// For layout debugging.

.debug-red   () { background-color: rgba(235, 117, 131, 0.75); background-color: #f595a0\9; }
.debug-green () { background-color: rgba(146, 224, 137, 0.75); background-color: #92e089\9; }
.debug-blue  () { background-color: rgba(191, 211, 245, 0.75); background-color: #bfddf5\9; }

// Vertical alignment short-hands.

.v-align (@value) { vertical-align: @value; }

.v-align-baseline    () { .v-align(baseline);    }
.v-align-sub         () { .v-align(sub);         }
.v-align-super       () { .v-align(super);       }
.v-align-middle      () { .v-align(middle);      }
.v-align-top         () { .v-align(top);         }
.v-align-bottom      () { .v-align(bottom);      }
.v-align-text-top    () { .v-align(text-top);    }
.v-align-text-bottom () { .v-align(text-bottom); }

// Text alignment short-hands.

.text-left    () { text-align: left;    }
.text-right   () { text-align: right;   }
.text-center  () { text-align: center;  }
.text-justify () { text-align: justify; }

// Cross-browser opacity with fix for IE8 and ClearType/PNGs "blackness leak".
// Note: @chroma-fix (if specified) MUST be a color in SIX hex digits such as "#123ABC".

.opacity (@value, @chroma-fix: #FDFDFD) {
	
	// At-least-halfway-decent browsers:
	opacity: @value;
	
	// Microsoft Internet Explorer:
	@ms-value: @value * 100;
	background-color: @chroma-fix ~"\9";
	-ms-filter:"Chroma(Color=@{chroma-fix}) Alpha(Opacity=@{ms-value})";
	
}

// Cross-browser CSS3 transitions.

.transition (...) {
    // As of writing, the only current browsers needing prefixes are android
    // and blackberry browsers. Yay! http://caniuse.com/css-transitions
    -webkit-transition: @arguments;
    // -moz-transition: @arguments;
    //  -ms-transition: @arguments;
    //   -o-transition: @arguments;
            transition: @arguments;
}

// Penner equations approximated into cubic beziers by Matthew Lein:
@easeInCubic    : cubic-bezier(0.550, 0.055, 0.675, 0.190); // Cubic
@easeOutCubic   : cubic-bezier(0.215, 0.610, 0.355, 1.000);
@easeInOutCubic : cubic-bezier(0.645, 0.045, 0.355, 1.000);
@easeInCirc     : cubic-bezier(0.600, 0.040, 0.980, 0.335); // Circ
@easeOutCirc    : cubic-bezier(0.075, 0.820, 0.165, 1.000);
@easeInOutCirc  : cubic-bezier(0.785, 0.135, 0.150, 0.860);
@easeInExpo     : cubic-bezier(0.950, 0.050, 0.795, 0.035); // Expo
@easeOutExpo    : cubic-bezier(0.190, 1.000, 0.220, 1.000);
@easeInOutExpo  : cubic-bezier(1.000, 0.000, 0.000, 1.000);
@easeInQuad     : cubic-bezier(0.550, 0.085, 0.680, 0.530); // Quad
@easeOutQuad    : cubic-bezier(0.250, 0.460, 0.450, 0.940);
@easeInOutQuad  : cubic-bezier(0.455, 0.030, 0.515, 0.955);
@easeInQuart    : cubic-bezier(0.895, 0.030, 0.685, 0.220); // Quart
@easeOutQuart   : cubic-bezier(0.165, 0.840, 0.440, 1.000);
@easeInOutQuart : cubic-bezier(0.770, 0.000, 0.175, 1.000);
@easeInQuint    : cubic-bezier(0.755, 0.050, 0.855, 0.060); // Quint
@easeOutQuint   : cubic-bezier(0.230, 1.000, 0.320, 1.000);
@easeInOutQuint : cubic-bezier(0.860, 0.000, 0.070, 1.000);
@easeInSine     : cubic-bezier(0.470, 0.000, 0.745, 0.715); // Sine
@easeOutSine    : cubic-bezier(0.390, 0.575, 0.565, 1.000);
@easeInOutSine  : cubic-bezier(0.445, 0.050, 0.550, 0.950);
@easeInBack     : cubic-bezier(0.600,-0.280, 0.735, 0.045); // Back
@easeOutBack    : cubic-bezier(0.175, 0.885, 0.320, 1.275);
@easeInOutBack  : cubic-bezier(0.680,-0.550, 0.265, 1.550);

// Cross-browser CSS3 border-radius with bkg bleed fix.
// 2015 note: this is not needed anymore.

//.border-radius(...) {
//      -webkit-border-radius: @arguments;
//         -moz-border-radius: @arguments;
//              border-radius: @arguments;
//	// Because of http://tumble.sneak.co.nz/post/928998513/fixing-the-background-bleed
//    .bkg-clip(padding-box);
//}

// CSS3 box-shadow.

.box-shadow(...) {
    -webkit-box-shadow: @arguments;
       -moz-box-shadow: @arguments;
            box-shadow: @arguments;
}


// CSS3 placeholder color.

.placeholder(@color: #ccc) {
	&::-webkit-input-placeholder { color: @color; }
	&:-moz-placeholder { color: @color; }
}

// Disable/enable text selection. Updated 2014.08.31.

.user-select-none () {
       -ms-touch-select:    none;
           touch-action:    none;
	-webkit-touch-callout:    none;
	  -webkit-user-select:    none;
	     -moz-user-select:    none;
	      -ms-user-select:    none;
	          user-select:    none;
                 cursor: default;
}

.user-select-text () {
       -ms-touch-select: grippers;
           touch-action:     auto;
	-webkit-touch-callout:  default;
	  -webkit-user-select:     text;
	     -moz-user-select:     text;
	      -ms-user-select:     text;
	          user-select:     text;
                 cursor:     auto;
}

// More text-like versions.
.no-selection   () { .user-select-none; }
.text-selection () { .user-select-text; }
.unselectable   () { .user-select-none; }
.not-selectable () { .user-select-none; }
.selectable     () { .user-select-text; }



//////////////////////////////////////////////////////////////////////////
//                           2013 Additions                             //
//////////////////////////////////////////////////////////////////////////



// Smart centering.

.center-h (@width) {
    .relative;
    width: @width;
    left: 50%;
    margin-left: -@width / 2 ;
}

.center-v (@height) {
    .relative;
    height: @height;
    top: 50%;
    margin-top: -@height / 2 ;
}

// Padding for the lazy.

.pad(@amount) { padding: @amount; }
.pad0() { .pad(0); }

// Line height shorthand.

.line (@size) { line-height: @size; }

// Disables a link. http://caniuse.com/#feat=pointer-events

.disable () { pointer-events: none; cursor: default; }

// Why did I never knew how to do this before?

.smart-center() {
    vertical-align: bottom;
    max-height: 100%;
    max-width: 100%;
    position: absolute;
    margin: auto;
    .fill;
}

// Opacity for the lazy.

.hide        () { opacity: 0;    }
.show        () { opacity: 1;    }
.translucent () { opacity: 0.25; }
.translucid  () { opacity: 0.25; }
.semiopaque  () { opacity: 0.5;  }
.semi-opaque () { opacity: 0.5;  }
.opaque      () { opacity: 0.75; }

// Text orientation.

.rtl () { direction: rtl; }
.ltr () { direction: ltr; }

// Resets an element.

.reset() {
    margin: 0;
    padding: 0;
}

// Goddamn lists.

.clean-list() { list-style-type: none; }

// Case for the lazy.

.lowercase () { text-transform: lowercase;  }
.uppercase () { text-transform: uppercase;  }
.capitalize() { text-transform: capitalize; }
.small-caps() { font-variant:   small-caps; }



//////////////////////////////////////////////////////////////////////////
//                           2014 Additions                             //
//////////////////////////////////////////////////////////////////////////



// It's pretty common to specify front and background together.
// The ordering of the parameters was chosen because "black on white"
// or "white on black" is more common than, say, "white with black on top"
.colors(@fg, @bg) { color: @fg; background-color: @bg; }

// For when you want text to occupy just one line.
.single-line (clip)     { .no-wrap; .hide-overflow; .text-clip; }
.single-line (ellipsis) { .no-wrap; .hide-overflow; .ellipsis;  }
.single-line () { .single-line (ellipsis); } // The most common one, I guess.

// Disable some default stuff on forms and links.
.no-border () { border: none; }
.no-outline() { outline: none; }



//////////////////////////////////////////////////////////////////////////
//                           2015 Additions                             //
//////////////////////////////////////////////////////////////////////////



// This is a for-each thing which I do not completely comprehend, but am using.
// I'd really like to have a better understanding of it but honestly I'm just
// happy it works, for now. Yeah, another time I'll look better into how it works.
// Took it from: github.com/seven-phases-max/less.curious/blob/master/src/for.less
// Examples can be found in the following two articles:
// github.com/seven-phases-max/less.curious/blob/master/articles/generic-for.md
// github.com/seven-phases-max/less.curious/blob/master/articles/for-each.md
.for(@i, @n) {.-each(@i)}
.for(@n)       when (isnumber(@n)) {.for(1, @n)}
.for(@i, @n)   when not (@i = @n)  {.for((@i + (@n - @i) / abs(@n - @i)), @n);}
.for(@array)   when (default())    {.for-impl_(length(@array))}
.for-impl_(@i) when (@i > 1)       {.for-impl_((@i - 1))}
.for-impl_(@i) when (@i > 0)       {.-each(extract(@array, @i))}

// Easy border-radius with optional border declaration.
.radius(@radius) {
    border-radius: @radius;
}
.radius(@radius, @border) {
    border-radius: @radius;
    border: @border
}

// Background extension.
// Note you can now use comma-delimited background (such as for multiple background images)
// and the commas will be kept thanks to the for-each abstraction above, but keep in mind
// you must not have declared backgrounds before with the comma merge modifier ("rule+:")
// unless you know what you're doing. Dee: http://lesscss.org/features/#merge-feature-comma
.bkg(@background...) {
    .for(@background); .-each(@i) {
        background+: @i;
    }
}

// No-bullshit background clip and origin.
.clip-border    () { background-clip:    border-box; }
.clip-padding   () { background-clip:   padding-box; }
.clip-content   () { background-clip:   content-box; }
.origin-border  () { background-origin:  border-box; }
.origin-padding () { background-origin: padding-box; }
.origin-content () { background-origin: content-box; }

// Content: '' is so un-hip.
.empty() { content: ''; }

// Creating rounded-corners with a border filled with a gradient is
// not only an edge case, but also a bit tricky. This abstracts it.
.round-border-gradient(@position, @thickness, @radius, @gradient, @level: 1)
when (@position = absolute), (@position = relative), (@position = fixed) {
    .clip-padding;
    .radius(@radius, @thickness solid transparent);
    position: @position;

    &::before {
        .absolute;
        .below(@level);
        .bkg(@gradient);
        .empty;
        .radius(@radius);
        .sides(-@thickness);
    }
}

// This accepts a ruleset, which styles the placeholder text of inputs.
// This is supported on Webkit/Blink browsers (including Opera 15+),
// Firefox 19+ and IE 10+. Firefox 4+ can be supported by setting the
// third (optional) argument to true.
// Opacity must be specified explicitly; this is to avoid surprises.
// On Firefox, the default opacity is 0.4. If you specify 1, only Firefox
// will get an opacity set (since others already have it).
// Also, I wish there was a standard so I could add the "standard syntax"
// too, but there isn't any, so in the future this is something that will
// have to be updated (I still expect most browsers will support their
// vendor-prefixed versions for a while).
.placeholder(@opacity, @rules, @oldFirefox: false) {
    &::-webkit-input-placeholder {
        & when (@opacity < 1) { opacity: @opacity; }
        @rules();
    }
    &:-moz-placeholder when (@oldFirefox) {
        opacity: @opacity;
        @rules();
    }
    &::-moz-placeholder {
        opacity: @opacity;
        @rules();
    }
    &:-ms-input-placeholder {
        & when (@opacity < 1) { opacity: @opacity; }
        @rules();
    }
}

// Style text selection with a ruleset. Firefox needs the prefixed version, at least
// until this bug is fixed: https://bugzilla.mozilla.org/show_bug.cgi?id=509958
.selection(@rules) {
    &::-moz-selection {
        @rules();
    }
    &::selection {
        @rules();
    }
}
